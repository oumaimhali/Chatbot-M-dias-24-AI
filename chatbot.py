import pandas as pd
import streamlit as st
import openai
from datetime import datetime

# Configuration de OpenAI avec la cl√© API depuis Streamlit Secrets
openai.api_key = st.secrets["OPENAI_API_KEY"]

# Configuration de la page Streamlit
st.set_page_config(
    page_title="Chatbot Articles M√©dias",
    page_icon="üì∞",
    layout="wide"
)

# URL du fichier Excel (√† remplacer par votre lien de partage)
EXCEL_URL = "https://docs.google.com/spreadsheets/d/1your_file_id/export?format=xlsx"

# Fonction pour charger et pr√©parer les donn√©es
@st.cache_data
def load_data():
    try:
        # Essayer d'abord de charger depuis le fichier local
        df = pd.read_excel("data/articles_medias_small.xlsx")
    except Exception as e:
        st.error(f"""
        Pour utiliser ce chatbot, vous devez :
        1. Cr√©er un fichier Excel nomm√© 'articles_medias_small.xlsx'
        2. Le placer dans un dossier 'data' √† la racine du projet
        3. Le fichier doit contenir les colonnes : 'Date', 'Titre', 'Contenu'
        
        Erreur d√©taill√©e : {str(e)}
        """)
        return None
    
    # Conversion de la colonne Date en datetime
    if 'Date' in df.columns:
        df['Date'] = pd.to_datetime(df['Date'], errors='coerce')
    return df.sort_values('Date', ascending=True)

# Fonction pour trouver les articles pertinents avec filtrage par date
def find_relevant_articles(query, df, start_date=None, end_date=None):
    if df is None:
        return []
        
    query = query.lower()
    scores = []
    
    # Filtrer par date si sp√©cifi√©
    if start_date:
        df = df[df['Date'] >= start_date]
    if end_date:
        df = df[df['Date'] <= end_date]
    
    for idx, row in df.iterrows():
        content = str(row.get('Contenu', '')).lower()
        title = str(row.get('Titre', '')).lower()
        
        # Score bas√© sur la pr√©sence des mots dans le titre (poids plus √©lev√©) et le contenu
        title_score = sum(word in title for word in query.split()) * 2
        content_score = sum(word in content for word in query.split())
        total_score = title_score + content_score
        
        if total_score > 0:
            scores.append((idx, total_score, row['Date']))
    
    # Trier par score puis par date
    scores.sort(key=lambda x: (x[1], x[2]), reverse=True)
    return [(df.loc[idx], score) for idx, score, _ in scores]

def generate_chronological_synthesis(articles):
    if not articles:
        return "Aucun article pertinent trouv√©."
    
    # Trier les articles par date
    sorted_articles = sorted(articles, key=lambda x: x[0]['Date'])
    
    context = """Fais une synth√®se chronologique d√©taill√©e des articles suivants. 
    Pour chaque p√©riode importante :
    1. Indique clairement la date
    2. R√©sume les √©v√©nements marquants
    3. Mets en √©vidence l'√©volution du sujet dans le temps
    4. Termine par une conclusion sur l'√©volution globale du sujet

    Articles √† synth√©tiser :\n\n"""
    
    for article, score in sorted_articles:
        context += f"Date: {article['Date'].strftime('%d/%m/%Y')}\n"
        context += f"Titre: {article.get('Titre', 'Non disponible')}\n"
        context += f"Contenu: {article.get('Contenu', 'Non disponible')}\n\n"

    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "Tu es un expert en analyse d'articles d'actualit√©. Tu dois produire des synth√®ses chronologiques d√©taill√©es en fran√ßais, en mettant en √©vidence l'√©volution des √©v√©nements dans le temps."},
                {"role": "user", "content": context}
            ],
            max_tokens=1500,
            temperature=0.7
        )
        return response.choices[0].message['content']
    except Exception as e:
        return f"Erreur lors de la g√©n√©ration de la synth√®se : {str(e)}"

def generate_synthesis(articles):
    if not articles:
        return "Aucun article pertinent trouv√©."
        
    context = "Voici plusieurs articles d'actualit√©. Fais-en une synth√®se claire et concise en fran√ßais :\n\n"
    for article, score in articles:
        context += f"Article (pertinence {score:.2%}):\n"
        context += f"Titre: {article.get('Titre', 'Non disponible')}\n"
        context += f"Contenu: {article.get('Contenu', 'Non disponible')}\n\n"

    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "Tu es un expert en analyse d'articles d'actualit√©. Tu dois produire des synth√®ses claires, objectives et bien structur√©es en fran√ßais."},
                {"role": "user", "content": context}
            ],
            max_tokens=1000,
            temperature=0.7
        )
        return response.choices[0].message['content']
    except Exception as e:
        return f"Erreur lors de la g√©n√©ration de la synth√®se : {str(e)}"

def main():
    st.title("üí¨ Assistant Articles M√©dias Intelligent")
    
    # Chargement des donn√©es
    df = load_data()
    if df is None:
        return

    # Interface utilisateur
    st.write("---")
    
    # S√©lection du mode de recherche
    search_mode = st.radio(
        "Mode de recherche :",
        ["Synth√®se th√©matique chronologique", "R√©sum√© d√©taill√© d'un sujet"]
    )
    
    # Filtres de date
    col1, col2 = st.columns(2)
    with col1:
        start_date = st.date_input("Date de d√©but", min(df['Date'].dt.date))
    with col2:
        end_date = st.date_input("Date de fin", max(df['Date'].dt.date))

    # Zone de recherche
    user_input = st.text_input(
        "Quel sujet vous int√©resse ?",
        placeholder="Ex: √©nergies renouvelables, √©conomie, sport..."
    )
    
    if user_input:
        # Conversion des dates
        start_date = pd.Timestamp(start_date)
        end_date = pd.Timestamp(end_date)
        
        # Recherche des articles
        relevant_articles = find_relevant_articles(user_input, df, start_date, end_date)
        
        if relevant_articles:
            # G√©n√©ration de la synth√®se selon le mode choisi
            if search_mode == "Synth√®se th√©matique chronologique":
                synthesis = generate_chronological_synthesis(relevant_articles)
            else:
                synthesis = generate_synthesis(relevant_articles)
            
            # Affichage de la synth√®se
            st.write("---")
            st.subheader("Synth√®se :")
            st.write(synthesis)
            
            # Affichage des articles sources
            st.write("---")
            st.subheader("Articles sources :")
            for article, score in sorted(relevant_articles, key=lambda x: x[0]['Date'], reverse=True):
                with st.expander(f"üì∞ {article['Date'].strftime('%d/%m/%Y')} - {article.get('Titre', 'Sans titre')}"):
                    st.markdown(f"""
                    **Score de pertinence**: {score:.2%}
                    
                    **Contenu**: {article.get('Contenu', 'Non disponible')}
                    """)
        else:
            st.warning("Aucun article trouv√© pour cette recherche sur la p√©riode sp√©cifi√©e.")

if __name__ == "__main__":
    main()
